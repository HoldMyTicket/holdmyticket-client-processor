"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _qs = _interopRequireDefault(require("qs"));

var hmt_client_processor = function hmt_client_processor(settings) {
  this.api_url = settings.api_url || ''; // set when the script is loaded

  this.api_url_suffix = settings.api_url_suffix || ''; // set when the script is loaded

  this.env = settings.env || ''; // set when the script is loaded

  this.app_type = settings.app_type || ''; // set prior to submit (online | box)

  this.isHmtMobile = settings.isHmtMobile || false;
  this.auth = settings.app_type == 'box' && settings.auth || '';
  this.errors_internal = []; // errors to handle internally

  this.errors_processing = []; // errors to send back to clients regarding processing status

  this.country_codes = {
    '2': 'US',
    '3': 'AI',
    '4': 'AR',
    '5': 'AU',
    '6': 'AT',
    '7': 'BE',
    '8': 'BR',
    '9': 'CA',
    '10': 'CL',
    '11': 'C2',
    '12': 'CR',
    '13': 'CY',
    '14': 'CZ',
    '15': 'DK',
    '16': 'DO',
    '17': 'EC',
    '18': 'EE',
    '19': 'FI',
    '20': 'FR',
    '21': 'DE',
    '22': 'GR',
    '23': 'HK',
    '24': 'HU',
    '25': 'IS',
    '26': 'IN',
    '27': 'IE',
    '28': 'IL',
    '29': 'IT',
    '30': 'JM',
    '31': 'JP',
    '32': 'LV',
    '33': 'LT',
    '34': 'LU',
    '35': 'MY',
    '36': 'MT',
    '37': 'MX',
    '38': 'NL',
    '39': 'NZ',
    '40': 'NO',
    '41': 'PL',
    '42': 'PT',
    '43': 'SG',
    '44': 'SK',
    '45': 'SI',
    '46': 'ZA',
    '47': 'KR',
    '48': 'ES',
    '49': 'SE',
    '50': 'CH',
    '51': 'TW',
    '52': 'TH',
    '53': 'TR',
    '54': 'GB',
    '55': 'UY',
    '56': 'VE',
    '57': 'PE',
    '58': 'GT',
    '59': 'SL',
    '60': 'AL',
    '61': 'DZ',
    '62': 'AD',
    '63': 'AO',
    '64': 'AG',
    '65': 'AM',
    '66': 'AW',
    '67': 'AZ',
    '68': 'BS',
    '69': 'BH',
    '70': 'BB',
    '71': 'BZ',
    '72': 'BJ',
    '73': 'BM',
    '74': 'BT',
    '75': 'BO',
    '76': 'BA',
    '77': 'BW',
    '78': 'VG',
    '79': 'BN',
    '80': 'BG',
    '81': 'BF',
    '82': 'BI',
    '83': 'KH',
    '84': 'CV',
    '85': 'KY',
    '86': 'TD',
    '87': 'CO',
    '88': 'KM',
    '89': 'CK',
    '90': 'HR',
    '91': 'CD',
    '92': 'DJ',
    '93': 'DM',
    '94': 'SV',
    '95': 'ER',
    '96': 'ET',
    '97': 'FK',
    '98': 'FO',
    '99': 'FM',
    '100': 'FJ',
    '101': 'GF',
    '102': 'PF',
    '103': 'GA',
    '104': 'GM',
    '105': 'GI',
    '106': 'GL',
    '107': 'GD',
    '108': 'GP',
    '109': 'GN',
    '110': 'GW',
    '111': 'GY',
    '112': 'HN',
    '113': 'ID',
    '114': 'JO',
    '115': 'KZ',
    '116': 'KE',
    '117': 'KI',
    '118': 'KW',
    '119': 'KG',
    '120': 'LA',
    '121': 'LS',
    '122': 'LI',
    '123': 'MG',
    '124': 'MW',
    '125': 'MV',
    '126': 'ML',
    '127': 'MH',
    '128': 'MQ',
    '129': 'MR',
    '130': 'MU',
    '131': 'YT',
    '132': 'MN',
    '133': 'MS',
    '134': 'MA',
    '135': 'MZ',
    '136': 'NA',
    '137': 'NR',
    '138': 'NP',
    '139': 'AN',
    '140': 'NC',
    '141': 'NI',
    '142': 'NE',
    '143': 'NU',
    '144': 'NF',
    '145': 'OM',
    '146': 'PW',
    '147': 'PA',
    '148': 'PG',
    '149': 'PH',
    '150': 'PN',
    '151': 'QA',
    '152': 'CG',
    '153': 'RE',
    '154': 'RO',
    '155': 'RU',
    '156': 'RW',
    '157': 'VC',
    '158': 'WS',
    '159': 'SM',
    '160': 'ST',
    '161': 'SA',
    '162': 'SN',
    '163': 'SC',
    '164': 'SB',
    '165': 'SO',
    '166': 'LK',
    '167': 'SH',
    '168': 'KN',
    '169': 'LC',
    '170': 'PM',
    '171': 'SR',
    '172': 'SJ',
    '173': 'SZ',
    '174': 'TJ',
    '175': 'TZ',
    '176': 'TG',
    '177': 'TO',
    '178': 'TT',
    '179': 'TN',
    '180': 'TM',
    '181': 'TC',
    '182': 'TV',
    '183': 'UG',
    '184': 'UA',
    '185': 'AE',
    '186': 'VU',
    '187': 'VA',
    '188': 'VN',
    '189': 'WF',
    '190': 'YE',
    '191': 'ZM'
  };

  this.url = function (endpoint, use_suffix) {
    return this.api_url + endpoint + (use_suffix ? this.api_url_suffix : '');
  };

  this.spreedly_url = function (spreedly_environment_key) {
    return 'https://core.spreedly.com/v1/payment_methods.json?environment_key=' + spreedly_environment_key;
  };

  this.fullsteam_url = function () {
    return 'https://api' + (this.env == 'local' || this.env == 'dev' || this.env == 'staging' ? '-ext' : '') + '.fullsteampay.net/';
  };
  /*
  PUBLIC FUNCTIONS
  */
  // main function that the client will call to submit transactions


  this.submit_transaction = function (card, transaction, cb) {
    var _this = this;

    this._clear_state();

    transaction = this._prepare_transaction(transaction);

    var response = function response(result, cb, transaction) {
      var error = !result ? true : false;
      var res = result ? result : {
        status: 'error',
        errors: _this.errors_processing
      }; // just pass back the cb_data here, and not everywhere else

      if (transaction.cb_data) res.cb_data = transaction.cb_data; // log the bad response here

      if (error) _this._log_bad_trans(transaction, res);

      _this._respond(error, res, cb);
    }; // determine the method to use spreedly | fullsteam


    if (transaction.processor_method == 'spreedly') {
      this._submit_spreedly(card, transaction, cb).then(function (result) {
        response(result, cb, transaction);
      });
    } else if (transaction.processor_method == 'fullsteam') {
      this._submit_fullsteam(card, transaction, cb).then(function (result) {
        response(result, cb, transaction);
      });
    } else {
      this._add_internal_error('No processing method setup');

      response(false, cb);
    }
  }; // public fn, calling internal so internal can be async


  this.save_card = function (card, transaction, processor, ticket_key) {
    this._save_card(card, transaction, processor, ticket_key);
  };

  this.webuser_save_card = function (card, data, webuser_id, cb) {
    this._webuser_save_card(card, data, webuser_id, cb);
  };
  /*
  PRIVATE FUNCTIONS
  */

  /* SPREEDLY */


  this._get_spreedly_env_key = function () {
    if (this.spreedly_environment_key) return this.spreedly_environment_key;
    if (config && config.spreedly_environment_key) return config.spreedly_environment_key;
    return '';
  };

  this._submit_spreedly = function _callee(card, transaction) {
    var token_res, transaction_res;
    return _regenerator["default"].async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!transaction.payment_token) {
              _context.next = 4;
              break;
            }

            _context.next = 3;
            return _regenerator["default"].awrap(this._submit_spreedly_transaction(transaction));

          case 3:
            return _context.abrupt("return", _context.sent);

          case 4:
            _context.next = 6;
            return _regenerator["default"].awrap(this._get_spreedly_token(card, transaction.spreedly_environment_key));

          case 6:
            token_res = _context.sent;

            if (!(!token_res || !token_res.transaction || !token_res.transaction.payment_method || !token_res.transaction.payment_method.token)) {
              _context.next = 9;
              break;
            }

            return _context.abrupt("return", this._add_internal_error('Spreedly, Could not get token'));

          case 9:
            transaction.payment_token = token_res.transaction.payment_method.token;
            _context.next = 12;
            return _regenerator["default"].awrap(this._submit_spreedly_transaction(transaction));

          case 12:
            transaction_res = _context.sent;
            if (transaction_res && transaction_res.ticket_key) this._save_card_to_webuser({
              ticket_key: transaction_res.ticket_key
            });
            if (transaction.cc_retain && transaction.cc_retain == 'y') this._save_card(card, transaction, 'fullsteam');
            return _context.abrupt("return", transaction_res);

          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  };

  this._get_spreedly_token = function _callee2(card, spreedly_environment_key, cb) {
    var token;
    return _regenerator["default"].async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _regenerator["default"].awrap(this._request({
              url: this.spreedly_url(spreedly_environment_key),
              type: 'POST',
              withCredentials: false,
              json: true,
              data: card
            }));

          case 2:
            token = _context2.sent;

            if (token.errors && token.errors.length > 0) {
              for (key in token.errors) {
                this._add_processing_error(token.errors[key].message);
              }
            }

            return _context2.abrupt("return", token);

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  };

  this._submit_spreedly_transaction = function _callee3(transaction, cb) {
    var transaction_res;
    return _regenerator["default"].async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (transaction.payments) transaction.payments = this._update_payments_token(transaction.payments, transaction.payment_token);
            transaction = this._remove_sensitive_card_data(transaction);
            _context3.next = 4;
            return _regenerator["default"].awrap(this._request({
              url: this.url('shop/carts/submit', true),
              type: 'POST',
              data: transaction,
              form_encoded: true,
              withCredentials: true
            }));

          case 4:
            transaction_res = _context3.sent;
            return _context3.abrupt("return", transaction_res);

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this);
  };
  /* FULLSTEAM */


  this._submit_fullsteam = function _callee4(card, transaction, cb) {
    var authentication_key_res, auth_key, token_res, transaction_res;
    return _regenerator["default"].async(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (!transaction.payment_token) {
              _context4.next = 4;
              break;
            }

            _context4.next = 3;
            return _regenerator["default"].awrap(this._submit_fullsteam_transaction(transaction));

          case 3:
            return _context4.abrupt("return", _context4.sent);

          case 4:
            _context4.next = 6;
            return _regenerator["default"].awrap(this._get_fullsteam_auth_key());

          case 6:
            authentication_key_res = _context4.sent;
            auth_key = null;
            if (authentication_key_res && authentication_key_res.status && authentication_key_res.status == 'ok' && authentication_key_res.authenticationKey) auth_key = authentication_key_res.authenticationKey;
            _context4.next = 11;
            return _regenerator["default"].awrap(this._get_fullsteam_token(card, transaction, auth_key));

          case 11:
            token_res = _context4.sent;

            if (!(!token_res || !token_res.isSuccessful)) {
              _context4.next = 14;
              break;
            }

            return _context4.abrupt("return", false);

          case 14:
            transaction.payment_token = token_res.token;
            if (transaction.payments) transaction.payments = this._update_payments_token(transaction.payments, transaction.payment_token);
            _context4.next = 18;
            return _regenerator["default"].awrap(this._submit_fullsteam_transaction(transaction));

          case 18:
            transaction_res = _context4.sent;
            if (transaction_res && transaction_res.ticket_key) this._save_card_to_webuser({
              ticket_key: transaction_res.ticket_key
            });

            if (transaction.cc_retain && transaction.cc_retain == 'y') {
              if (!transaction.spreedly_environment_key) transaction.spreedly_environment_key = this._get_spreedly_env_key();

              this._save_card(card, transaction, 'spreedly');
            }

            return _context4.abrupt("return", transaction_res);

          case 22:
          case "end":
            return _context4.stop();
        }
      }
    }, null, this);
  };

  this._get_fullsteam_auth_key = function _callee5() {
    var token_res;
    return _regenerator["default"].async(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _regenerator["default"].awrap(this._request({
              url: this.url('shop/processors/get_authentication_key', true)
            }));

          case 2:
            token_res = _context5.sent;
            return _context5.abrupt("return", token_res);

          case 4:
          case "end":
            return _context5.stop();
        }
      }
    }, null, this);
  };

  this._get_fullsteam_token = function _callee6(card, transaction, auth_key, cb) {
    var data, res, msg, key, issuerResponseCode, issuerResponseDescription, CVVResponseCode, CVVResponseDescription;
    return _regenerator["default"].async(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (!(!card || !card.payment_method || !card.payment_method.credit_card || !card.payment_method.credit_card.number || !card.payment_method.credit_card.month || !card.payment_method.credit_card.year || !card.payment_method.credit_card.full_name || !card.payment_method.credit_card.verification_value)) {
              _context6.next = 3;
              break;
            }

            this._add_processing_error('Missing required card inputs');

            return _context6.abrupt("return", false);

          case 3:
            data = {
              "clearTextCardData": {
                "cardNumber": card.payment_method.credit_card.number.replace(/\s/g, ''),
                "cvv": card.payment_method.credit_card.verification_value,
                "expirationMonth": card.payment_method.credit_card.month,
                "expirationYear": card.payment_method.credit_card.year,
                "billingInformation": {
                  "nameOnAccount": card.payment_method.credit_card.full_name,
                  "firstName": transaction.f_name || null,
                  "lastName": transaction.l_name || null,
                  "address1": transaction.address1 || null,
                  "address2": transaction.address2 || null,
                  "city": transaction.city || null,
                  "state": transaction.state || null,
                  "zip": transaction.zip || (this.app_type == 'box' ? '00000' : null),
                  "country": this._get_fullsteam_contry_code(transaction),
                  "phone": transaction.phone || null,
                  "email": transaction.email || null
                }
              },
              "cardEntryContext": this.app_type == 'box' ? 7 : 5,
              "performAccountVerification": true
            };
            if (transaction.country_id && transaction.country_id != '2') delete data.clearTextCardData.billingInformation.state;
            _context6.next = 7;
            return _regenerator["default"].awrap(this._request({
              url: this.fullsteam_url() + 'api/token/card/clearText/create',
              type: 'POST',
              cors: true,
              crossdomain: true,
              data: data,
              json: true,
              withCredentials: false,
              auth_key: auth_key
            }));

          case 7:
            res = _context6.sent;

            if (!(!res || !res.isSuccessful)) {
              _context6.next = 16;
              break;
            }

            this._add_internal_error('Fullsteam, Could not get token');

            msg = '';

            if (res && res.responseDetails) {
              for (key in res.responseDetails) {
                this._add_processing_error(res.responseDetails[key].message);
              }
            }

            if (res && res.issuerResponseDetails) {
              issuerResponseCode = res.issuerResponseDetails.issuerResponseCode || 0;
              issuerResponseDescription = res.issuerResponseDetails.issuerResponseDescription || '';
              CVVResponseCode = res.issuerResponseDetails.cvvResponseCode && ['M', 'P'].indexOf(res.issuerResponseDetails.cvvResponseCode) == -1 ? res.issuerResponseDetails.cvvResponseCode : 0;
              CVVResponseDescription = CVVResponseCode && res.issuerResponseDetails.cvvResponseDescription ? res.issuerResponseDetails.cvvResponseDescription : ''; //we only look for cvv not M (match), P (not processed) cvv

              if (CVVResponseDescription) {
                msg = "CVV Error: " + CVVResponseDescription; //takes precedence
              } else {
                if (msg == '' && issuerResponseDescription) msg = "Error: " + issuerResponseDescription;
                if (msg == '' && (!issuerResponseCode || issuerResponseCode == '00')) msg = "CPE2: Missing error code";
                if (msg == '') msg = "CPE3: Unknown issuer error";
              }
            }

            if (msg == '' && this.errors_processing.length == 0) msg = 'CPE4: Unknown processor error';

            this._add_processing_error(msg);

            return _context6.abrupt("return", false);

          case 16:
            return _context6.abrupt("return", res);

          case 17:
          case "end":
            return _context6.stop();
        }
      }
    }, null, this);
  };

  this._submit_fullsteam_transaction = function _callee7(transaction, cb) {
    var transaction_res;
    return _regenerator["default"].async(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            transaction = this._remove_sensitive_card_data(transaction);
            _context7.next = 3;
            return _regenerator["default"].awrap(this._request({
              url: this.url('shop/carts/submit', true),
              type: 'POST',
              data: transaction,
              form_encoded: true,
              withCredentials: true
            }));

          case 3:
            transaction_res = _context7.sent;
            return _context7.abrupt("return", transaction_res);

          case 5:
          case "end":
            return _context7.stop();
        }
      }
    }, null, this);
  };

  this._get_fullsteam_contry_code = function (transaction) {
    //country_id from HMT. return intnl country_code
    var hmt_country_id = transaction.country_id || '2';
    if (this.country_codes && this.country_codes[hmt_country_id]) return this.country_codes[hmt_country_id];
    return 'US';
  };
  /* Card Saving Fns */


  this._save_card = function _callee8(card, transaction, processor, ticket_key) {
    var card_data, args, token_res, authentication_key_res, env_key;
    return _regenerator["default"].async(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (!(!card || !card.payment_method || !card.payment_method.credit_card)) {
              _context8.next = 2;
              break;
            }

            return _context8.abrupt("return");

          case 2:
            card_data = card.payment_method.credit_card;
            args = {
              card: card_data,
              processor: processor
            };
            ticket_key = ticket_key || '';
            if (ticket_key) args.ticket_key = ticket_key;

            if (!(processor == 'spreedly')) {
              _context8.next = 14;
              break;
            }

            _context8.next = 9;
            return _regenerator["default"].awrap(this._get_spreedly_token(card, transaction.spreedly_environment_key));

          case 9:
            token_res = _context8.sent;

            if (token_res) {
              _context8.next = 12;
              break;
            }

            return _context8.abrupt("return");

          case 12:
            if (token_res.transaction && token_res.transaction.payment_method && token_res.transaction.payment_method.token) args.token = token_res.transaction.payment_method.token;

            this._save_card_to_webuser(args);

          case 14:
            if (!(processor == 'fullsteam')) {
              _context8.next = 23;
              break;
            }

            _context8.next = 17;
            return _regenerator["default"].awrap(this._get_fullsteam_auth_key());

          case 17:
            authentication_key_res = _context8.sent;
            env_key = null;
            if (authentication_key_res && authentication_key_res.status && authentication_key_res.status == 'ok' && authentication_key_res.authenticationKey) env_key = authentication_key_res.authenticationKey;

            if (env_key) {
              _context8.next = 22;
              break;
            }

            return _context8.abrupt("return");

          case 22:
            this._get_fullsteam_token(card, transaction, env_key, function (err, token_res) {
              if (!token_res || !token_res.isSuccessful || !token_res.token) return;
              args.token = token_res.token;

              this._save_card_to_webuser(args);
            });

          case 23:
          case "end":
            return _context8.stop();
        }
      }
    }, null, this);
  };

  this._save_card_to_webuser = function _callee9(args) {
    var card_data, data, res;
    return _regenerator["default"].async(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            this._remember_card_data(args);

            card_data = this.card_data ? this._format_card_for_save(this.card_data) : null;

            if (!(this.card_ticket_key && card_data && this.card_token && this.card_processor)) {
              _context9.next = 7;
              break;
            }

            data = {
              ticket_key: this.card_ticket_key,
              vault: this.card_processor,
              token: this.card_token,
              card_data: card_data
            };
            _context9.next = 6;
            return _regenerator["default"].awrap(this._request({
              url: this.url('public/orders/save_additional_card', false),
              type: 'POST',
              withCredentials: false,
              data: data,
              form_encoded: true
            }));

          case 6:
            res = _context9.sent;

          case 7:
          case "end":
            return _context9.stop();
        }
      }
    }, null, this);
  };

  this._webuser_save_card = function _callee10(card, data, webuser_id, cb) {
    var res, err, spreedly_token_res, request_data, save_credit_card_res, authentication_key_res, env_key, fullsteam_token_res, card_data, save_additional_card_res;
    return _regenerator["default"].async(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            res = false;
            err = false;
            _context10.next = 4;
            return _regenerator["default"].awrap(this._get_spreedly_token(card, data.spreedly_environment_key));

          case 4:
            spreedly_token_res = _context10.sent;

            if (!(!spreedly_token_res || !spreedly_token_res.transaction || !spreedly_token_res.transaction.payment_method || !spreedly_token_res.transaction.payment_method.token)) {
              _context10.next = 9;
              break;
            }

            if (!this.errors_processing && !this.errors_internal) this._add_internal_error('Spreedly, Could not get token');

            this._respond(this.errors_processing, spreedly_token_res, cb);

            return _context10.abrupt("return");

          case 9:
            request_data = {
              webuser_id: webuser_id,
              token: spreedly_token_res.transaction.payment_method.token,
              vault: 'spreedly'
            };
            _context10.next = 12;
            return _regenerator["default"].awrap(this._request({
              url: this.url('public/users/save_credit_card', false),
              type: 'POST',
              withCredentials: false,
              data: request_data,
              form_encoded: true
            }));

          case 12:
            save_credit_card_res = _context10.sent;
            if (save_credit_card_res && save_credit_card_res.status == 'ok' && save_credit_card_res.statusText == 'OK') res = save_credit_card_res; // this will be the successfull res!

            if (!(!save_credit_card_res || !save_credit_card_res.status || save_credit_card_res.status != 'ok')) {
              _context10.next = 19;
              break;
            }

            if (save_credit_card_res && save_credit_card_res.response && save_credit_card_res.response.msg) this._add_processing_error(save_credit_card_res.response.msg);
            if (!this.errors_processing && !this.errors_internal) this._add_internal_error('Spreedly, Error saving credit card');

            this._respond(this.errors_processing, spreedly_token_res, cb);

            return _context10.abrupt("return");

          case 19:
            _context10.next = 21;
            return _regenerator["default"].awrap(this._get_fullsteam_auth_key());

          case 21:
            authentication_key_res = _context10.sent;
            env_key = null;
            if (authentication_key_res && authentication_key_res.status && authentication_key_res.status == 'ok' && authentication_key_res.authenticationKey) env_key = authentication_key_res.authenticationKey;

            if (env_key) {
              _context10.next = 28;
              break;
            }

            if (!this.errors_processing && !this.errors_internal) this._add_internal_error('Fullsteam, Could not get env_key');

            this._respond(this.errors_processing, authentication_key_res, cb);

            return _context10.abrupt("return");

          case 28:
            if (!data.zip && card.payment_method.credit_card.zip) data.zip = card.payment_method.credit_card.zip;
            _context10.next = 31;
            return _regenerator["default"].awrap(this._get_fullsteam_token(card, data, env_key));

          case 31:
            fullsteam_token_res = _context10.sent;

            if (!(!fullsteam_token_res || !fullsteam_token_res.isSuccessful || !fullsteam_token_res.token)) {
              _context10.next = 36;
              break;
            }

            // _get_fullsteam_token throws internal error for: !fullsteam_token_res || !fullsteam_token_res.isSuccessful
            if (fullsteam_token_res && !fullsteam_token_res.token) // throw internal error when there is a fullsteam_token_res, but no token
              this._add_internal_error('Fullsteam, Responded with no token');

            this._respond(this.errors_processing, authentication_key_res, cb);

            return _context10.abrupt("return");

          case 36:
            card_data = card.payment_method.credit_card ? this._format_card_for_save(card.payment_method.credit_card) : null;
            data = {
              webuser_id: webuser_id,
              vault: 'fullsteam',
              token: fullsteam_token_res.token,
              card_data: card_data
            };
            _context10.next = 40;
            return _regenerator["default"].awrap(this._request({
              url: this.url('public/users/save_additional_card', false),
              type: 'POST',
              withCredentials: false,
              data: data,
              form_encoded: true
            }));

          case 40:
            save_additional_card_res = _context10.sent;

            if (!(!save_additional_card_res || !save_additional_card_res.status || save_additional_card_res.status != 'ok')) {
              _context10.next = 45;
              break;
            }

            if (!this.errors_processing && !this.errors_internal) this._add_internal_error('Fullsteam, Error saving credit card');

            this._respond(this.errors_processing, save_credit_card_res, cb);

            return _context10.abrupt("return");

          case 45:
            this._respond(err, res, cb);

          case 46:
          case "end":
            return _context10.stop();
        }
      }
    }, null, this);
  };
  /*
  Utilities
  */


  this._update_payments_token = function (payments, payment_token) {
    //for split payments we need the token
    for (var i = 0; i < payments.length; i++) {
      var payment = payments[i];
      if (payment.type == 'credit') payments[i].payment_token = payment_token;
    }

    return payments;
  };

  this._format_card_for_save = function (card_data) {
    if (!card_data.full_name) return false;
    if (!card_data.month) return false;
    if (!card_data.year) return false;
    if (!card_data.number) return false;
    return {
      full_name: card_data.full_name,
      last_four: this._get_last_four(card_data.number),
      exp_month: card_data.month,
      exp_year: card_data.year
    };
  };

  this._format_phone_number = function (phone_number) {
    // \D stands for any non digit
    return phone_number.replace(/\D/g, '');
  };

  this._get_last_four = function (cc_num) {
    return cc_num.substr(cc_num.length - 4);
  };

  this._remember_card_data = function (args) {
    if (args.card) this.card_data = args.card;
    if (args.token) this.card_token = args.token;
    if (args.processor) this.card_processor = args.processor;
    if (args.ticket_key) this.card_ticket_key = args.ticket_key;
  };

  this._clear_state = function () {
    this.errors_internal = [];
    this.errors_processing = [];
    delete this.card_data;
    delete this.card_token;
    delete this.processor;
    delete this.card_ticket_key;
  };

  this._remove_sensitive_card_data = function (data) {
    delete data.cc_no;
    delete data.cc_cvc;
    delete data.cc_expiry;
    delete data.cc_name;
    delete data.encryptedTrack1;
    delete data.encryptedTrack2;
    delete data.ksn;
    return data;
  };
  /* 
  Main Request Fn
  */


  this._request = function _callee11(opts) {
    var _this2 = this;

    return _regenerator["default"].async(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            return _context11.abrupt("return", new Promise(function (resolve, reject) {
              // default
              var headers = {};
              if (opts.json) headers['content-type'] = 'application/json;charset=UTF-8';

              if (opts.form_encoded) {
                headers['content-type'] = 'application/x-www-form-urlencoded;charset=UTF-8';

                if (opts.data.payments) {
                  var payments = opts.data.payments;
                  delete opts.data.payments;

                  var stringifiedPostData = _this2._serializer(opts.data);

                  var stringifiedPayments = _this2._serializer({
                    payments: payments
                  });

                  stringifiedPostData = stringifiedPostData + '&' + stringifiedPayments;
                } else {
                  var stringifiedPostData = _this2._serializer(opts.data);
                }

                opts.data = stringifiedPostData;
              }

              if (opts.auth_key) headers['authenticationKey'] = opts.auth_key;
              var url = opts.url;
              var data;
              if (opts.data) data = opts.data;

              if (_this2.auth && _this2.app_type == 'box' && url.indexOf('submit') > -1) {
                url += (url.indexOf('?') > -1 ? '&' : '?') + 'auth=' + _this2.auth;
                if ((0, _typeof2["default"])(data) == 'object') data.can_handle_fullsteam = 'true';
                if (typeof data == 'string') data += '&can_handle_fullsteam=true';
              }

              if (opts.json) data = JSON.stringify(data); // build the xhr request

              var xhr = new XMLHttpRequest();
              xhr.open(opts.type || 'GET', url);
              xhr.withCredentials = opts.withCredentials || false;

              for (key in headers) {
                xhr.setRequestHeader(key, headers[key]);
              }

              xhr.onreadystatechange = function (evt) {
                if (xhr.readyState === 4) {
                  _this2._logger(url, data, xhr, opts);

                  if (xhr.status && xhr.status >= 200 && xhr.status <= 299) resolve(_this2._xhr_success(xhr));else resolve(_this2._xhr_fail(xhr, url));
                }
              };

              xhr.send(data);
            }));

          case 1:
          case "end":
            return _context11.stop();
        }
      }
    });
  };
  /* 
  Request Responses 
  */


  this._xhr_success = function (xhr, opts) {
    var res = {};

    try {
      res = JSON.parse(xhr.responseText);
    } catch (error) {
      console.log('could not parse the response to json');
    } // attempt to set statusText


    if (xhr.statusText) res.statusText = xhr.statusText; // react native seems to have a bug where the statusText comes through as undefined
    // to get around it we'll set the prop manually for status 200 so we can pass any checks for it in the lib

    if (this.isHmtMobile && !res.statusText) res.statusText = 'OK';
    return res;
  };

  this._xhr_fail = function (xhr, url, opts) {
    var error = null;

    try {
      error = JSON.parse(xhr.response);
    } catch (error) {
      console.log('could not parse error response');
    }

    var res = {};

    try {
      res = JSON.parse(xhr.responseText);
    } catch (error) {
      console.log('could not parse the response to json');
    }

    if (!res.status && res.status !== 'error') res.status = 'error';
    res.statusText = xhr.statusText ? xhr.statusText : 'ERROR';
    return res;
  };

  this._respond = function (err, res, cb) {
    if (err || !res || res.status == 'error') {
      this._throw_error(err, res, cb);

      return;
    }

    if (cb) {
      if (res.data) {
        cb(null, res.data);
      } else {
        cb(null, res);
      }
    }
  };

  this._throw_error = function (err, res, cb) {
    if (!err && res.msg) err = res.msg;
    if (!err) err = true;
    if (cb) cb(err, res);
  };

  this._logger = function (url, data, xhr, opts) {
    try {
      var d = {};
      if (data && opts.json && typeof data == 'string') d = JSON.parse(data);
      if (d.clearTextCardData) delete d.clearTextCardData;

      var log = this._prepare_for_log({
        url: url,
        data: d,
        xhr: {
          // had to define these, can't stringify the raw xhr
          readyState: xhr.readyState ? xhr.readyState : null,
          response: xhr.response ? xhr.response : null,
          responseText: xhr.responseText ? xhr.responseText : null,
          responseURL: xhr.responseURL ? xhr.responseURL : null,
          responseXML: xhr.responseXML ? xhr.responseXML : null,
          status: xhr.status ? xhr.status : null,
          statusText: xhr.statusText ? xhr.statusText : null,
          timeout: xhr.timeout ? xhr.timeout : null
        },
        browser_info: this._get_browser_info()
      });

      var xhr = new XMLHttpRequest();
      xhr.open('POST', this.url('shop/processors/logme2342311', true), true);
      xhr.withCredentials = true;
      xhr.setRequestHeader('content-type', 'application/json;charset=UTF-8');
      xhr.send(JSON.stringify(log));
    } catch (error) {
      // console.error so we can reference this in FullStory
      console.error('CPE7 Logger Error', error);
    }
  };

  this._log_bad_trans = function (transaction, response) {
    try {
      var d = {
        form_data: transaction ? transaction : null,
        transaction: transaction ? transaction : null
      };
      d.form_data.errors_internal = this.errors_internal;
      d.form_data.errors_processing = this.errors_processing;
      if (!d.transaction.processor) d.transaction.processor = {
        merch_gateway: transaction.processor_method ? transaction.processor_method : null
      };
      d.transaction.error_msg = this.errors_processing.join("\n");
      var xhr = new XMLHttpRequest();
      xhr.open('POST', this.url('shop/carts/log_bad_trans', true), true);
      xhr.withCredentials = true;
      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8');
      xhr.send(this._serializer(d));
    } catch (error) {
      console.warn('Could not log bad trans');
    }
  };

  this._prepare_for_log = function (data) {
    var str = JSON.stringify(data); // mask cc data

    str = str.replace(/\b(?:\d{4}[ -]?){3}(?=\d{4}\b)/gm, "**** **** **** ");
    return str;
  };

  this._get_browser_info = function () {
    if (this.hmtMobile) return {
      platform: 'hmtMobile'
    };
    return {
      platform: navigator && navigator.platform ? navigator.platform : '',
      userAgent: navigator && navigator.userAgent ? navigator.userAgent : '',
      vendor: navigator && navigator.vendor ? navigator.vendor : '',
      vendorSub: navigator && navigator.vendorSub ? navigator.vendorSub : ''
    };
  }; // deep serialize object to form data


  this._serializer = function (obj) {
    return _qs["default"].stringify(obj, {
      arrayFormat: 'repeat'
    }); // var pairs = [];
    // for (var prop in obj) {
    //     if (!obj.hasOwnProperty(prop)) {
    //         continue;
    //     }
    //     if (Object.prototype.toString.call(obj[prop]) == '[object Object]') {
    //         pairs.push(this._serializer(obj[prop]));
    //         continue;
    //     }
    //     pairs.push(prop + '=' + obj[prop]);
    // }
    // 
    // return pairs.join('&');
  }; // prepare the transaction data prior to submitting


  this._prepare_transaction = function (transaction) {
    // removing all phone special chars. Only allow numbers
    if (transaction.phone) transaction.phone = this._format_phone_number(transaction.phone);
    return transaction;
  }; // add a internal error


  this._add_internal_error = function (err) {
    this.errors_internal.push(err);
    return false;
  }; // add a processing error


  this._add_processing_error = function (err) {
    this.errors_processing.push(err);
    return false;
  };
};

var _default = hmt_client_processor;
exports["default"] = _default;