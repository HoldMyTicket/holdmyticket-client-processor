(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("qs"));
	else if(typeof define === 'function' && define.amd)
		define(["qs"], factory);
	else if(typeof exports === 'object')
		exports["hmt_client_processor"] = factory(require("qs"));
	else
		root["hmt_client_processor"] = factory(root["Qs"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE_qs__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/hmt-client-processor.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/hmt-client-processor.js":
/*!*************************************!*\
  !*** ./src/hmt-client-processor.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var qs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! qs */ \"qs\");\n/* harmony import */ var qs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(qs__WEBPACK_IMPORTED_MODULE_0__);\n\n\nvar hmt_client_processor = function(settings){\n\n  var me = this\n\n  this.url = function(endpoint, use_suffix){\n\n    return this.api_url + endpoint + (use_suffix ? this.api_url_suffix : '')\n\n  }\n  \n  this.spreedly_url = function(spreedly_environment_key){\n\n    return 'https://core.spreedly.com/v1/payment_methods.json?environment_key='+spreedly_environment_key\n    \n  }\n  \n  this.fullsteam_url = function(){\n\n    return 'https://api'+(this.env == 'local' || this.env == 'dev' || this.env == 'staging' ? '-ext' : '')+'.fullsteampay.net/'\n\n  }\n  \n  this.submit_transaction = function(card, transaction, cb){\n    this._remove_card_data()\n    \n    // removing all phone special chars. Only allow numbers\n    if (transaction.phone) transaction.phone = this._format_phone_number(transaction.phone);\n\n    // determine the method to use spreedly | fullsteam\n    if(transaction.processor_method == 'spreedly')\n      this._submit_spreedly(card, transaction, cb)\n    else if(transaction.processor_method == 'fullsteam')\n      this._submit_fullsteam(card, transaction, cb)\n    else\n      this._throw_error(true, {status: 'error', msg: 'No processing method setup'}, cb)\n      \n  }\n  \n  /* SPREEDLY */\n  \n  this._submit_spreedly = function(card, transaction, cb){\n\n    if (transaction.payment_token) {\n      me._submit_spreedly_transaction(transaction, function(err, transaction_res) {\n\n        if(transaction.cb_data)\n          transaction_res.cb_data = transaction.cb_data\n        \n        me._respond(err, transaction_res, cb);\n        \n      });\n    } else {\n      me._get_spreedly_token(card, transaction.spreedly_environment_key, function(err, token_res){\n\n        if(err) {\n          if(transaction.cb_data)\n            token_res.cb_data = transaction.cb_data\n\n          me._respond(err, token_res, cb)\n          return;\n        }\n  \n        transaction.payment_token = token_res.transaction.payment_method.token\n\n        if(transaction.payments)\n          transaction.payments = me._update_payments_token(transaction.payments, transaction.payment_token)\n        \n        me._submit_spreedly_transaction(transaction, function(err, transaction_res){\n          \n          if(transaction.cb_data)\n            transaction_res.cb_data = transaction.cb_data\n          \n          if(!err && transaction_res.ticket_key)\n            me._save_card_to_webuser({ticket_key: transaction_res.ticket_key})\n\n          me._respond(err, transaction_res, cb)\n          \n        })\n        \n      })\n    }\n\n    if(transaction.cc_retain && transaction.cc_retain == 'y')\n        me.save_card(card, transaction, 'fullsteam')\n    \n  }\n\n  this._update_payments_token = function(payments, payment_token){\n    //for split payments we need the token\n    for(var i =0; i < payments.length; i++){\n      var payment = payments[i]\n      if(payment.type == 'credit')\n        payments[i].payment_token = payment_token\n    }\n    return payments\n  }\n  \n  this._get_spreedly_token = function(card, spreedly_environment_key, cb){\n\n    me._request({\n      url: me.spreedly_url(spreedly_environment_key),\n      type: 'POST',\n      withCredentials : false,\n      data: card,\n      cb : function(err, res){\n        me._respond(err, res, cb)\n      }\n    })\n    \n  }\n  \n  this._submit_spreedly_transaction = function(transaction, cb){\n    transaction = me._remove_sensitive_card_data(transaction)\n    \n    me._request({\n      url: me.url('shop/carts/submit', true),\n      type: 'POST',\n      data: transaction,\n      form_encoded: true,\n      withCredentials: true,\n      cb : function(err, res){\n        me._respond(err, res, cb)\n      }\n    })\n    \n  }\n  \n  /* FULLSTEAM */\n  \n  this._submit_fullsteam = function(card, transaction, cb){\n    \n    if (transaction.payment_token) {\n\n      me._submit_fullsteam_transaction(transaction, function(err, transaction_res){\n        \n        if(transaction.cb_data)\n          transaction_res.cb_data = transaction.cb_data\n\n        me._respond(err, transaction_res, cb)\n    \n      })\n\n    } else {\n      me._get_fullsteam_auth_key(function(err, authentication_key_res){\n\n        var auth_key = null\n        \n        if(authentication_key_res && authentication_key_res.status && authentication_key_res.status == 'ok' && authentication_key_res.authenticationKey)\n          auth_key = authentication_key_res.authenticationKey\n        \n        // TODO validate the key\n        \n        me._get_fullsteam_token(card, transaction, auth_key, function(err, token_res){\n          \n          // TODO validate the token\n          \n          if(!token_res || !token_res.isSuccessful || !token_res.token){\n          \n            if(transaction.cb_data)\n              token_res.cb_data = transaction.cb_data\n\n            return me._handle_fullsteam_error(token_res, cb)\n          }\n  \n          transaction.payment_token = token_res.token\n\n          if(transaction.payments)\n            transaction.payments = me._update_payments_token(transaction.payments, transaction.payment_token)\n        \n          me._submit_fullsteam_transaction(transaction, function(err, transaction_res){\n            \n            if(transaction.cb_data) \n              transaction_res.cb_data = transaction.cb_data\n            \n            if(!err && transaction_res.ticket_key)\n              me._save_card_to_webuser({ticket_key: transaction_res.ticket_key})\n            \n            me._respond(err, transaction_res, cb)\n        \n          })\n        \n        })\n  \n      })\n    }\n\n    if(transaction.cc_retain && transaction.cc_retain == 'y'){\n      if(!transaction.spreedly_environment_key){\n        transaction.spreedly_environment_key = me._get_spreedly_env_key()\n      }\n      me.save_card(card, transaction, 'spreedly')\n    }\n\n  }\n\n  this._get_spreedly_env_key = function(){\n    if(this.spreedly_environment_key)\n      return this.spreedly_environment_key\n\n    if(config && config.spreedly_environment_key)\n      return config.spreedly_environment_key\n\n    return ''\n  }\n\n  this.save_card = function(card, transaction, processor, ticket_key){\n\n    if(!card || !card.payment_method || !card.payment_method.credit_card)\n      return\n\n    var card_data = card.payment_method.credit_card\n\n    var args = {card: card_data, processor: processor}\n\n    ticket_key = ticket_key || ''\n    if(ticket_key)\n      args.ticket_key = ticket_key\n\n    if(processor == 'spreedly'){\n      me._get_spreedly_token(card, transaction.spreedly_environment_key, function(err, token_res){\n        if(err) {\n          return;\n        }\n        if(token_res.transaction && token_res.transaction.payment_method && token_res.transaction.payment_method.token)\n          args.token = token_res.transaction.payment_method.token\n\n        me._save_card_to_webuser(args);\n        \n      })\n    }\n\n    if(processor == 'fullsteam'){\n      me._get_fullsteam_auth_key(function(err, authentication_key_res){\n\n      var env_key = null\n      \n      if(authentication_key_res && authentication_key_res.status && authentication_key_res.status == 'ok' && authentication_key_res.authenticationKey)\n        env_key = authentication_key_res.authenticationKey\n\n        if(!env_key)\n          return\n\n        me._get_fullsteam_token(card, transaction, env_key, function(err, token_res){\n          \n          if(!token_res || !token_res.isSuccessful || !token_res.token)\n            return\n\n          args.token = token_res.token;\n        \n          me._save_card_to_webuser(args);\n        \n        })\n\n      })\n\n    }\n\n  }\n\n  this.webuser_save_card = function(card, data, webuser_id, cb) {\n\n\t\tme._get_spreedly_token(card, data.spreedly_environment_key, function(err, token_res) {\n\t\t\tif (err) {\n\t\t\t\tme._respond(err, token_res, cb);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar request_data = {\n        webuser_id: webuser_id,\n\t\t\t\ttoken: token_res.transaction.payment_method.token,\n        vault: 'spreedly'\n\t\t\t};\n\n\t\t\tme._request({\n\t\t\t\turl: me.url('public/users/save_credit_card', false),\n\t\t\t\ttype: 'POST',\n\t\t\t\twithCredentials : false,\n\t\t\t\tdata: request_data,\n\t\t\t\tform_encoded: true,\n\t\t\t\tcb : function(err, res) {\n          if(res && res.status == '200' && res.statusText == 'OK')\n            res = res.data\n\n          if(!res || !res.status || res.status != 'ok'){\n            return me._respond(err, res, cb);\n          }\n\n\t\t\t\t\tme._get_fullsteam_auth_key(function(err, authentication_key_res) {\n\t\t\t\t\t\tvar env_key = null;\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tauthentication_key_res &&\n\t\t\t\t\t\t\tauthentication_key_res.status &&\n\t\t\t\t\t\t\tauthentication_key_res.status == 'ok' &&\n\t\t\t\t\t\t\tauthentication_key_res.authenticationKey\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\tenv_key = authentication_key_res.authenticationKey;\n\n\n\t\t\t\t\t\tif (!env_key) return;\n\n            if(!data.zip && card.payment_method.credit_card.zip)\n              data.zip = card.payment_method.credit_card.zip\n\n\n\t\t\t\t\t\tme._get_fullsteam_token(card, data, env_key, function(err, token_res) {\n\t\t\t\t\t\t\tif (!token_res || !token_res.isSuccessful || !token_res.token) return me._respond(err, token_res, cb);\n\n\t\t\t\t\t\t\tvar card_data = card.payment_method.credit_card\n\t\t\t\t\t\t\t\t? me._format_card_for_save(card.payment_method.credit_card)\n\t\t\t\t\t\t\t\t: null;\n\n\t\t\t\t\t\t\tvar data = {\n                webuser_id: webuser_id,\n\t\t\t\t\t\t\t\tvault: 'fullsteam',\n\t\t\t\t\t\t\t\ttoken: token_res.token,\n\t\t\t\t\t\t\t\tcard_data: card_data\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tme._request({\n\t\t\t\t\t\t\t\turl: me.url('public/users/save_additional_card', false),\n\t\t\t\t\t\t\t\ttype: 'POST',\n\t\t\t\t\t\t\t\twithCredentials : false,\n\t\t\t\t\t\t\t\tdata: data,\n\t\t\t\t\t\t\t\tform_encoded: true,\n\t\t\t\t\t\t\t\tcb : function(err, res) {\n\t\t\t\t\t\t\t\t\tme._respond(err, res, cb);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n  this._save_card_to_webuser = function(args){\n\n    me._remember_card_data(args)\n\n    var card_data = me.card_data ? me._format_card_for_save(me.card_data) : null\n\n    if(me.card_ticket_key && card_data && me.card_token && me.card_processor){\n\n      var data = {\n        ticket_key: me.card_ticket_key,\n        vault: me.card_processor,\n        token: me.card_token,\n        card_data: card_data\n      }\n\n      me._request({\n        url: me.url('public/orders/save_additional_card', false),\n        type: 'POST',\n        withCredentials : false,\n        data: data,\n        form_encoded: true,\n        cb : function(err, res){\n          // me._respond(err, res, cb)\n        }\n      })\n    }\n\n  }\n\n  this._format_card_for_save = function(card_data){\n    \n    if(!card_data.full_name)\n      return false\n    if(!card_data.month)\n      return false\n    if(!card_data.year)\n      return false\n    if(!card_data.number)\n      return false\n\n    return {\n      full_name : card_data.full_name,\n      last_four : me._get_last_four(card_data.number),\n      exp_month : card_data.month,\n      exp_year : card_data.year,\n    }\n  }\n\n  this._get_last_four = function(cc_num){\n    return cc_num.substr(cc_num.length - 4)\n  }\n\n  this._remember_card_data = function(args){\n\n    if(args.card)\n      me.card_data = args.card\n    if(args.token)\n      me.card_token = args.token\n    if(args.processor)\n      me.card_processor = args.processor\n    if(args.ticket_key)\n      me.card_ticket_key = args.ticket_key\n  }\n\n  this._remove_card_data = function(){\n\n    delete me.card_data\n    delete me.card_token\n    delete me.processor\n    delete me.card_ticket_key\n  }\n\n  this._remove_sensitive_card_data = function(data){\n\n    delete data.cc_no\n    delete data.cc_cvc\n    delete data.cc_expiry\n    delete data.cc_name\n    delete data.encryptedTrack1\n    delete data.encryptedTrack2\n    delete data.ksn\n\n    return data\n  }\n  \n  this._get_fullsteam_auth_key = function(cb){\n    \n    me._request({\n      url: this.url('shop/processors/get_authentication_key', true),\n      cb : function(err, res){\n        me._respond(err, res, cb)\n      }\n    })\n    \n  }\n\n  this._get_fullsteam_token = function(card, transaction, auth_key, cb){\n    if(\n      !card || \n      !card.payment_method || \n      !card.payment_method.credit_card || \n      !card.payment_method.credit_card.number || \n      !card.payment_method.credit_card.month || \n      !card.payment_method.credit_card.year || \n      !card.payment_method.credit_card.full_name || \n      !card.payment_method.credit_card.verification_value\n    ){\n      cb(true, 'Missing required card inputs')\n      return\n    }\n    \n    var data = {\n      \"clearTextCardData\": {\n        \"cardNumber\": card.payment_method.credit_card.number.replace(/\\s/g, ''),\n        \"cvv\": card.payment_method.credit_card.verification_value,\n        \"expirationMonth\": card.payment_method.credit_card.month,\n        \"expirationYear\": card.payment_method.credit_card.year,\n        \"billingInformation\": {\n          \"nameOnAccount\": card.payment_method.credit_card.full_name,\n          \"firstName\": transaction.f_name || null,\n          \"lastName\": transaction.l_name || null,\n          \"address1\": transaction.address1 || null,\n          \"address2\": transaction.address2 || null,\n          \"city\": transaction.city || null,\n          \"state\": transaction.state || null,\n          \"zip\": transaction.zip || (this.app_type  == 'box' ? '00000' : null),\n          \"country\": me._get_fullsteam_contry_code(transaction),\n          \"phone\": transaction.phone || null,\n          \"email\": transaction.email || null,\n        }\n      },\n      \"cardEntryContext\": this.app_type == 'box' ? 7 : 5,\n      \"performAccountVerification\": true\n    }\n\n    if(transaction.country_id && transaction.country_id != '2')\n      delete data.clearTextCardData.billingInformation.state\n    \n    me._request({\n      url: this.fullsteam_url() + 'api/token/card/clearText/create',\n      type: 'POST',\n      cors: true,\n      crossdomain: true,\n      data: data,\n      json: true,\n      withCredentials : false,\n      auth_key: auth_key,\n      cb : function(err, res){\n        me._respond(err, res, cb)\n      }      \n    })\n\n  }\n  \n  this._submit_fullsteam_transaction = function(transaction, cb){\n    transaction = me._remove_sensitive_card_data(transaction)\n\n    me._request({\n      url: this.url('shop/carts/submit', true),\n      type: 'POST',\n      data: transaction,\n      form_encoded: true,\n      withCredentials: true,\n      cb : function(err, json){\n        me._respond(err, json, cb)\n      }\n    })\n    \n  }\n  \n  this._request = function(opts){\n\n    // default\n    var headers = {}\n    \n    if(opts.json)\n      headers['content-type'] = 'application/json;charset=UTF-8'\n    \n    if(opts.form_encoded){\n      headers['content-type'] = 'application/x-www-form-urlencoded;charset=UTF-8'\n      \n      if (opts.data.payments) {\n        var payments = opts.data.payments;\n        delete opts.data.payments;\n\n        var stringifiedPostData = qs__WEBPACK_IMPORTED_MODULE_0___default.a.stringify(opts.data, { arrayFormat: 'repeat' });\n        var stringifiedPayments = qs__WEBPACK_IMPORTED_MODULE_0___default.a.stringify({ payments: payments });\n        stringifiedPostData = stringifiedPostData + '&' + stringifiedPayments;\n      } else {\n        var stringifiedPostData = qs__WEBPACK_IMPORTED_MODULE_0___default.a.stringify(opts.data, { arrayFormat: 'repeat' });\n      }\n      \n      opts.data = stringifiedPostData;\n    }\n\n    if(opts.auth_key)\n      headers['authenticationKey'] = opts.auth_key\n\n    var url = opts.url\n\n    var data;\n    if(opts.data)\n      data = opts.data\n\n    if(this.auth && this.app_type == 'box' && url.indexOf('submit') > -1){\n      url += (url.indexOf('?') > -1 ? '&' : '?') + 'auth='+this.auth\n      if(typeof data == 'object')\n        data.can_handle_fullsteam = 'true'\n      if(typeof data == 'string')\n        data += '&can_handle_fullsteam=true'\n    }\n\n    if(opts.json)\n      data = JSON.stringify(data)\n\n    var xhr = new XMLHttpRequest();\n    xhr.open(opts.type || 'GET', url, true);\n    xhr.withCredentials = opts.withCredentials || false;\n    for(key in headers)\n      xhr.setRequestHeader(key, headers[key])\n    xhr.onreadystatechange = function (evt) {\n      if (xhr.readyState === 4){\n\n        me._logger(url, data, xhr, opts)\n\n        if (xhr.status && xhr.status >= 200 && xhr.status <= 299){\n          me._success_response(xhr, opts)\n        } else {\n          me._failed_response(xhr, opts)\n        }  \n        \n      }  \n    }; \n    xhr.send(data)\n    \n  }\n  \n  this._success_response = function(xhr, opts){\n    \n    var res = {}\n    \n    try {\n      res = JSON.parse(xhr.responseText)\n    } catch(error) {\n      console.log('could not parse the response to json')\n    }\n\n    // attempt to set statusText\n    if(xhr.statusText)\n      res.statusText = xhr.statusText\n\n    // react native seems to have a bug where the statusText comes through as undefined\n    // to get around it we'll set the prop manually for status 200 so we can pass any checks for it in the lib\n    if (me.isHmtMobile && !res.statusText)\n      res.statusText = 'OK';\n  \n    if(opts.cb)\n      opts.cb(null, res)  \n        \n  }\n\n  this._failed_response = function(xhr, opts){\n    \n    var error_msg = me._format_error(error, url)\n\n    if(!res)\n     res = {}\n\n    if(!res.status && res.status !== 'error')\n     res.status = 'error'\n\n    res.statusText = xhr.statusText ? xhr.statusText : 'ERROR'\n    res.msg = error_msg\n    // res.axiosErrorMsg = error.message\n\n    if(opts.cb)\n      opts.cb(error, res)\n\n  }\n\n  this._format_error = function(error, processor_url) {\n    if(processor_url.indexOf('core.spreedly.com') != -1){\n      return this._format_spreedly_error(error)\n    } else {\n      return this._format_fullsteam_error(error)\n    }\n  }\n\n  this._format_spreedly_error = function(error){\n    var res = null;\n    if(error.response && error.response.data && error.response.data.errors) {\n      var error_msg = 'Processing Error:<br>';\n      for(var i =0; i < error.response.data.errors.length; i++ ){\n        var err = error.response.data.errors[i]\n        error_msg += err.message ? '- '+err.message+\"<br>\" : ''\n      }\n      return error_msg\n    }\n\n    return 'CPE5: Unknown error'\n\n  }\n\n  this._format_fullsteam_error = function(error){\n    return error && error.msg ? error.msg : 'CPE6: Unknown error'\n  }\n  \n  this._handle_fullsteam_error = function(res, cb){\n    \n    var msg = ''\n    \n    if(res && res.responseDetails){\n      for(var key in res.responseDetails)\n        msg += res.responseDetails[key].message+\"\\n\\n\"\n    }\n\n    if(res && res.issuerResponseDetails){\n      var issuerResponseCode = res.issuerResponseDetails.issuerResponseCode || 0\n      var issuerResponseDescription = res.issuerResponseDetails.issuerResponseDescription || ''\n      var CVVResponseCode = res.issuerResponseDetails.cvvResponseCode && ['M', 'P'].indexOf(res.issuerResponseDetails.cvvResponseCode) == -1 ? res.issuerResponseDetails.cvvResponseCode : 0\n      var CVVResponseDescription =  CVVResponseCode && res.issuerResponseDetails.cvvResponseDescription ? res.issuerResponseDetails.cvvResponseDescription : ''\n      //we only look for cvv not M (match), P (not processed) cvv\n\n      if(CVVResponseDescription){\n        msg = \"CVV Error: \"+CVVResponseDescription; //takes precedence\n      } else {\n        if(msg == '' && issuerResponseDescription)\n          msg = \"Error: \"+issuerResponseDescription\n\n        if(msg == '' && (!issuerResponseCode || issuerResponseCode == '00'))\n          msg = \"CPE2: Missing error code\"\n\n        if(msg == '') \n          msg = \"CPE3: Unknown issuer error\"\n\n      };\n    };\n\n    msg = msg || \"CPE4: Unknown processor error\"\n\n    res.msg = msg;\n    \n    return me._throw_error(true, res, cb)\n    \n  }\n  \n  this._respond = function(err, res, cb){\n\n    if(err || !res || res.status == 'error'){\n      me._throw_error(err, res, cb)\n      return\n    }\n\n    if(cb){\n      if(res.data){\n        cb(null, res.data)\n      }else{\n        cb(null, res)\n      }\n    }\n    \n  }\n  \n  this._throw_error = function(err, res, cb){\n        \n    if(!err && res.msg)\n      err = res.msg\n    \n    if(!err)\n      err = true\n    \n    if(cb)\n      cb(err, res)\n    \n  }\n\n  this._get_fullsteam_contry_code = function(transaction){\n    //country_id from HMT. return intnl country_code\n\n    var hmt_country_id = transaction.country_id || '2'\n\n    if(me.country_codes && me.country_codes[hmt_country_id])\n      return me.country_codes[hmt_country_id]\n\n    return 'US';\n  }\n\n  this._logger = function(url, data, xhr, opts){\n    \n    try {\n\n      var d = {}\n      \n      if(data && opts.json && typeof data == 'string')\n        d = JSON.parse(data)\n      \n      if(d.clearTextCardData)\n        delete d.clearTextCardData\n\n      var log = this._prepare_for_log({\n        url: url,\n        data: d,\n        xhr: { // had to define these, can't stringify the raw xhr\n          readyState: xhr.readyState ? xhr.readyState : null,\n          response: xhr.response ? xhr.response : null,\n          responseText: xhr.responseText ? xhr.responseText : null,\n          responseURL: xhr.responseURL ? xhr.responseURL : null,\n          responseXML: xhr.responseXML ? xhr.responseXML : null,\n          status: xhr.status ? xhr.status : null,\n          statusText: xhr.statusText ? xhr.statusText : null,\n          timeout: xhr.timeout ? xhr.timeout : null\n        },\n        browser_info: me._get_browser_info()\n      })\n      \n      var xhr = new XMLHttpRequest();\n      xhr.open('POST', me.url('shop/processors/logme2342311', true), true);\n      xhr.withCredentials = true\n      xhr.setRequestHeader('content-type', 'application/json;charset=UTF-8')\n      xhr.send(JSON.stringify(log))\n\n    } catch(error) {\n      // console.error so we can reference this in FullStory\n      console.warn('CPE7 Logger Warn', url, data, xhr)\n      console.error('CPE7 Logger Error', error);\n    }\n\n  }\n\n  this._prepare_for_log = function(data){\n    \n    var str = JSON.stringify(data)\n\n    // mask cc data\n    str = str.replace(/\\b(?:\\d{4}[ -]?){3}(?=\\d{4}\\b)/gm, `**** **** **** `)\n    \n    return str\n\n  }\n  \n  this._format_phone_number = function(phone_number) {\n    // \\D stands for any non digit\n    return phone_number.replace(/\\D/g, '');\n  }\n\n  this._get_browser_info = function() {\n    \n    if(me.hmtMobile)\n      return { platform: 'hmtMobile' }\n    \n    return {\n      platform: navigator && navigator.platform ? navigator.platform : '',\n      userAgent: navigator && navigator.userAgent ? navigator.userAgent : '',\n      vendor: navigator && navigator.vendor ? navigator.vendor : '',\n      vendorSub: navigator && navigator.vendorSub ? navigator.vendorSub : '',\n    }\n    \n  }\n\n  this.country_codes = {\n    '2':'US','3':'AI','4':'AR','5':'AU','6':'AT','7':'BE','8':'BR','9':'CA','10':'CL','11':'C2','12':'CR','13':'CY','14':'CZ','15':'DK','16':'DO','17':'EC','18':'EE','19':'FI','20':'FR','21':'DE','22':'GR','23':'HK','24':'HU','25':'IS','26':'IN','27':'IE','28':'IL','29':'IT','30':'JM','31':'JP','32':'LV','33':'LT','34':'LU','35':'MY','36':'MT','37':'MX','38':'NL','39':'NZ','40':'NO','41':'PL','42':'PT','43':'SG','44':'SK','45':'SI','46':'ZA','47':'KR','48':'ES','49':'SE','50':'CH','51':'TW','52':'TH','53':'TR','54':'GB','55':'UY','56':'VE','57':'PE','58':'GT','59':'SL','60':'AL','61':'DZ','62':'AD','63':'AO','64':'AG','65':'AM','66':'AW','67':'AZ','68':'BS','69':'BH','70':'BB','71':'BZ','72':'BJ','73':'BM','74':'BT','75':'BO','76':'BA','77':'BW','78':'VG','79':'BN','80':'BG','81':'BF','82':'BI','83':'KH','84':'CV','85':'KY','86':'TD','87':'CO','88':'KM','89':'CK','90':'HR','91':'CD','92':'DJ','93':'DM','94':'SV','95':'ER','96':'ET','97':'FK','98':'FO','99':'FM','100':'FJ','101':'GF','102':'PF','103':'GA','104':'GM','105':'GI','106':'GL','107':'GD','108':'GP','109':'GN','110':'GW','111':'GY','112':'HN','113':'ID','114':'JO','115':'KZ','116':'KE','117':'KI','118':'KW','119':'KG','120':'LA','121':'LS','122':'LI','123':'MG','124':'MW','125':'MV','126':'ML','127':'MH','128':'MQ','129':'MR','130':'MU','131':'YT','132':'MN','133':'MS','134':'MA','135':'MZ','136':'NA','137':'NR','138':'NP','139':'AN','140':'NC','141':'NI','142':'NE','143':'NU','144':'NF','145':'OM','146':'PW','147':'PA','148':'PG','149':'PH','150':'PN','151':'QA','152':'CG','153':'RE','154':'RO','155':'RU','156':'RW','157':'VC','158':'WS','159':'SM','160':'ST','161':'SA','162':'SN','163':'SC','164':'SB','165':'SO','166':'LK','167':'SH','168':'KN','169':'LC','170':'PM','171':'SR','172':'SJ','173':'SZ','174':'TJ','175':'TZ','176':'TG','177':'TO','178':'TT','179':'TN','180':'TM','181':'TC','182':'TV','183':'UG','184':'UA','185':'AE','186':'VU','187':'VA','188':'VN','189':'WF','190':'YE','191':'ZM'\n  }\n\n  this.api_url = settings.api_url || '' // set when the script is loaded\n\n  this.api_url_suffix = settings.api_url_suffix || '' // set when the script is loaded\n\n  this.env = settings.env || '' // set when the script is loaded\n  \n  this.app_type = settings.app_type || '' // set prior to submit (online | box)\n\n  this.isHmtMobile = settings.isHmtMobile ||  false\n\n  this.auth = settings.app_type == 'box' && settings.auth || ''\n\n  \n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (hmt_client_processor);\n\n//# sourceURL=webpack://hmt_client_processor/./src/hmt-client-processor.js?");

/***/ }),

/***/ "qs":
/*!**************************************************************************!*\
  !*** external {"commonjs":"qs","commonjs2":"qs","amd":"qs","root":"Qs"} ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_qs__;\n\n//# sourceURL=webpack://hmt_client_processor/external_%7B%22commonjs%22:%22qs%22,%22commonjs2%22:%22qs%22,%22amd%22:%22qs%22,%22root%22:%22Qs%22%7D?");

/***/ })

/******/ })["default"];
});